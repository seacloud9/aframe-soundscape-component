!function(t){function e(i){if(a[i])return a[i].exports;var r=a[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,e,a){if(a(3),a(2),a(4),a(1),"undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");AFRAME.registerComponent("aframe-soundscape",{schema:{noise:{default:4e-4},fogColor:{default:0},colors:{default:["0xC07000"]},textureBg:{default:"textures/terrain/backgrounddetailed6.jpg"},textureNormalMap:{default:"textures/terrain/grasslight-big-nm.jpg"},texture:{default:"textures/terrain/grasslight-big.jpg"},textureNormalMapCanvas:{default:"soundScapeNM"},initTextureFunction:{default:null}},multiple:!1,init:function(){null!==this.data.initTextureFunction?window[this.data.initTextureFunction]():this.initSoundScape()},initSoundScape:function(){this.el;this.data.SCREEN_WIDTH=window.innerWidth,this.data.SCREEN_HEIGHT=window.innerHeight,this.camera=this.el.sceneEl.camera,this.camera.position.set(-1200,800,1200),this.render=this.el.sceneEl.renderer,this.data.sceneRenderTarget=new THREE.Scene,this.data.cameraOrtho=new THREE.OrthographicCamera(this.data.SCREEN_WIDTH/-2,this.data.SCREEN_WIDTH/2,this.data.SCREEN_HEIGHT/2,this.data.SCREEN_HEIGHT/-2,-1e4,1e4),this.data.cameraOrtho.position.z=100,this.data.sceneRenderTarget.add(this.data.cameraOrtho),this.data.uniformsNoise,this.data.uniformsNormal,this.data.uniformsTerrain,this.data.heightMap,this.data.normalMap,this.data.quadTarget,this.data.directionalLight,this.data.pointLight,this.data.terrain,this.data.textureCounter=0,this.data.animDelta=0,this.data.animDeltaDir=-1,this.data.lightVal=0,this.data.lightDir=1,this.data.clock=new THREE.Clock,this.data.updateNoise=!0,this.data.animateTerrain=!0,this.data.mlib={},this.data.canvasMaterail=[],this.data.canvasTexture=[];for(var t=0;t<this.el.attributes.length;t++){var e=this.el.attributes[t];if(e.specified&&"canvas-material"===e.name){this.data.canvasMaterail.push(this.el.components["canvas-material"].canvas);var a=document.getElementById(this.data.textureNormalMapCanvas);null!==a&&this.data.canvasMaterail.push(a.components["canvas-material"].canvas);break}}this.scene=this.el.sceneEl.object3D,this.scene.fog=new THREE.Fog(this.data.fogColor,2e3,4e3),this.scene.add(new THREE.AmbientLight(1118481)),this.data.directionalLight=new THREE.DirectionalLight(16777215,1.15),this.data.directionalLight.position.set(500,2e3,0),this.scene.add(this.data.directionalLight),this.data.pointLight=new THREE.PointLight(16729088,1.5),this.data.pointLight.position.set(0,0,0),this.scene.add(this.data.pointLight);var i=THREE.NormalMapShader,r=256,o=256,n={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat};this.data.heightMap=new THREE.WebGLRenderTarget(r,o,n),this.data.heightMap.texture.generateMipmaps=!1,this.data.normalMap=new THREE.WebGLRenderTarget(r,o,n),this.data.normalMap.texture.generateMipmaps=!1,this.data.uniformsNoise={time:{value:1},scale:{value:new THREE.Vector2(1.5,1.5)},offset:{value:new THREE.Vector2(0,0)}},this.data.uniformsNormal=THREE.UniformsUtils.clone(i.uniforms),this.data.uniformsNormal.height.value=.05,this.data.uniformsNormal.resolution.value.set(r,o),this.data.uniformsNormal.heightMap.value=this.data.heightMap.texture;var s=THREE.ShaderNoise.noise_generate.vertexShader,l=new THREE.LoadingManager(function(){this.data.terrain.visible=!0}.bind(this)),u=new THREE.TextureLoader(l),c=new THREE.WebGLRenderTarget(2048,2048,n);c.texture.generateMipmaps=!1;var h=u.load(this.data.texture),d=u.load(this.data.textureBg),v=u.load(this.data.textureNormalMap);h.wrapS=h.wrapT=THREE.RepeatWrapping,d.wrapS=d.wrapT=THREE.RepeatWrapping,v.wrapS=v.wrapT=THREE.RepeatWrapping,c.texture.wrapS=c.texture.wrapT=THREE.RepeatWrapping;var f=THREE.ShaderTerrain.terrain;this.data.uniformsTerrain=THREE.UniformsUtils.clone(f.uniforms),this.data.uniformsTerrain.tNormal.value=this.data.normalMap.texture,this.data.uniformsTerrain.uNormalScale.value=3.5,this.data.uniformsTerrain.tDisplacement.value=this.data.heightMap.texture,this.data.canvasMaterail.length?(this.data.canvasTexture.push(new THREE.CanvasTexture(this.data.canvasMaterail[0])),this.data.canvasTexture[0].wrapS=this.data.canvasTexture[0].wrapT=THREE.RepeatWrapping,this.data.uniformsTerrain.tDiffuse1.value=this.data.canvasTexture[0],this.data.canvasMaterail.length>1?(this.data.canvasTexture.push(new THREE.CanvasTexture(this.data.canvasMaterail[1])),this.data.canvasTexture[1].wrapS=this.data.canvasTexture[1].wrapT=THREE.RepeatWrapping,this.data.uniformsTerrain.tDiffuse2.value=this.data.canvasTexture[1]):this.data.uniformsTerrain.tDiffuse2.value=d):(this.data.uniformsTerrain.tDiffuse1.value=h,this.data.uniformsTerrain.tDiffuse2.value=d),this.data.uniformsTerrain.tSpecular.value=c.texture,this.data.uniformsTerrain.tDetail.value=v,this.data.uniformsTerrain.enableDiffuse1.value=!0,this.data.uniformsTerrain.enableDiffuse2.value=!0,this.data.uniformsTerrain.enableSpecular.value=!0,this.data.uniformsTerrain.diffuse.value.setHex(16777215),this.data.uniformsTerrain.specular.value.setHex(16777215),this.data.uniformsTerrain.shininess.value=30,this.data.uniformsTerrain.uDisplacementScale.value=375,this.data.uniformsTerrain.uRepeatOverlay.value.set(6,6);for(var m=[["heightmap",THREE.ShaderNoise.noise_generate.fragmentShader,s,this.data.uniformsNoise,!1],["normal",i.fragmentShader,i.vertexShader,this.data.uniformsNormal,!1],["terrain",f.fragmentShader,f.vertexShader,this.data.uniformsTerrain,!0]],t=0;t<m.length;t++)this.data.material=new THREE.ShaderMaterial({uniforms:m[t][3],vertexShader:m[t][2],fragmentShader:m[t][1],lights:m[t][4],fog:!0}),this.data.mlib[m[t][0]]=this.data.material;var p=new THREE.PlaneBufferGeometry(this.data.SCREEN_WIDTH,this.data.SCREEN_HEIGHT);this.data.quadTarget=new THREE.Mesh(p,new THREE.MeshBasicMaterial({color:0})),this.data.quadTarget.position.z=-500,this.data.sceneRenderTarget.add(this.data.quadTarget);var g=new THREE.PlaneBufferGeometry(6e3,6e3,256,256);THREE.BufferGeometryUtils.computeTangents(g),this.data.terrain=new THREE.Mesh(g,this.data.mlib.terrain),this.data.terrain.position.set(0,-125,0),this.data.terrain.rotation.x=-Math.PI/2,this.data.terrain.visible=!1,this.scene.add(this.data.terrain)},update:function(t){},remove:function(){},tick:function(t){var e=this.data.clock.getDelta();if(this.render=this.el.sceneEl.renderer,this.scene=this.el.sceneEl.object3D,this.data.terrain.visible){var a=(.001*Date.now(),.1),i=.8;this.data.lightVal=THREE.Math.clamp(this.data.lightVal+.5*e*this.data.lightDir,a,i);var r=(this.data.lightVal-a)/(i-a);this.render.setClearColor(this.scene.fog.color),this.data.directionalLight.intensity=THREE.Math.mapLinear(r,0,1,.1,1.15),this.data.pointLight.intensity=THREE.Math.mapLinear(r,0,1,.9,1.5),this.data.uniformsTerrain.uNormalScale.value=THREE.Math.mapLinear(r,0,1,.6,3.5),this.data.updateNoise&&(this.data.animDelta=THREE.Math.clamp(this.data.animDelta+75e-5*this.data.animDeltaDir,0,.05),this.data.uniformsNoise.time.value+=e*this.data.animDelta,this.data.uniformsNoise.offset.value.x+=.05*e,this.data.uniformsTerrain.uOffset.value.x=4*this.data.uniformsNoise.offset.value.x,this.data.quadTarget.material=this.data.mlib.heightmap,this.render.render(this.data.sceneRenderTarget,this.data.cameraOrtho,this.data.heightMap,!0),this.data.quadTarget.material=this.data.mlib.normal,this.render.render(this.data.sceneRenderTarget,this.data.cameraOrtho,this.data.normalMap,!0)),this.data.canvasTexture.length&&(this.data.canvasTexture[0].needsUpdate=!0)}},pause:function(){},play:function(){}})},function(t,e){THREE.BufferGeometryUtils={computeTangents:function(t){function e(t,e,a){f.fromArray(n,3*t),m.fromArray(n,3*e),p.fromArray(n,3*a),g.fromArray(l,2*t),E.fromArray(l,2*e),x.fromArray(l,2*a);var i=m.x-f.x,r=p.x-f.x,o=m.y-f.y,s=p.y-f.y,u=m.z-f.z,c=p.z-f.z,v=E.x-g.x,R=x.x-g.x,D=E.y-g.y,H=x.y-g.y,w=1/(v*H-R*D);T.set((H*i-D*r)*w,(H*o-D*s)*w,(H*u-D*c)*w),y.set((v*r-R*i)*w,(v*s-R*o)*w,(v*c-R*u)*w),h[t].add(T),h[e].add(T),h[a].add(T),d[t].add(y),d[e].add(y),d[a].add(y)}function a(t){U.fromArray(s,3*t),A.copy(U),V=h[t],z.copy(V),z.sub(U.multiplyScalar(U.dot(V))).normalize(),_.crossVectors(A,V),C=_.dot(d[t]),b=C<0?-1:1,c[4*t]=z.x,c[4*t+1]=z.y,c[4*t+2]=z.z,c[4*t+3]=b}var i=t.index,r=t.attributes;if(null===i||void 0===r.position||void 0===r.normal||void 0===r.uv)return void console.warn("THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");var o=i.array,n=r.position.array,s=r.normal.array,l=r.uv.array,u=n.length/3;void 0===r.tangent&&t.addAttribute("tangent",new THREE.BufferAttribute(new Float32Array(4*u),4));for(var c=r.tangent.array,h=[],d=[],v=0;v<u;v++)h[v]=new THREE.Vector3,d[v]=new THREE.Vector3;var f=new THREE.Vector3,m=new THREE.Vector3,p=new THREE.Vector3,g=new THREE.Vector2,E=new THREE.Vector2,x=new THREE.Vector2,T=new THREE.Vector3,y=new THREE.Vector3,R=t.groups;0===R.length&&(R=[{start:0,count:o.length}]);for(var D=0,H=R.length;D<H;++D)for(var w=R[D],S=w.start,M=w.count,N=S,L=S+M;N<L;N+=3)e(o[N+0],o[N+1],o[N+2]);for(var b,V,C,z=new THREE.Vector3,_=new THREE.Vector3,U=new THREE.Vector3,A=new THREE.Vector3,D=0,H=R.length;D<H;++D)for(var w=R[D],S=w.start,M=w.count,N=S,L=S+M;N<L;N+=3)a(o[N+0]),a(o[N+1]),a(o[N+2])}}},function(t,e){THREE.NormalMapShader={uniforms:{heightMap:{value:null},resolution:{value:new THREE.Vector2(512,512)},scale:{value:new THREE.Vector2(1,1)},height:{value:.05}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float height;","uniform vec2 resolution;","uniform sampler2D heightMap;","varying vec2 vUv;","void main() {","float val = texture2D( heightMap, vUv ).x;","float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;","float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;","gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );","}"].join("\n")}},function(t,e){THREE.ShaderTerrain={terrain:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,{enableDiffuse1:{value:0},enableDiffuse2:{value:0},enableSpecular:{value:0},enableReflection:{value:0},tDiffuse1:{value:null},tDiffuse2:{value:null},tDetail:{value:null},tNormal:{value:null},tSpecular:{value:null},tDisplacement:{value:null},uNormalScale:{value:1},uDisplacementBias:{value:0},uDisplacementScale:{value:1},diffuse:{value:new THREE.Color(15658734)},specular:{value:new THREE.Color(1118481)},shininess:{value:30},opacity:{value:1},uRepeatBase:{value:new THREE.Vector2(1,1)},uRepeatOverlay:{value:new THREE.Vector2(1,1)},uOffset:{value:new THREE.Vector2(0,0)}}]),fragmentShader:["uniform vec3 diffuse;","uniform vec3 specular;","uniform float shininess;","uniform float opacity;","uniform bool enableDiffuse1;","uniform bool enableDiffuse2;","uniform bool enableSpecular;","uniform sampler2D tDiffuse1;","uniform sampler2D tDiffuse2;","uniform sampler2D tDetail;","uniform sampler2D tNormal;","uniform sampler2D tSpecular;","uniform sampler2D tDisplacement;","uniform float uNormalScale;","uniform vec2 uRepeatOverlay;","uniform vec2 uRepeatBase;","uniform vec2 uOffset;","varying vec3 vTangent;","varying vec3 vBinormal;","varying vec3 vNormal;","varying vec2 vUv;","varying vec3 vViewPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.bsdfs,THREE.ShaderChunk.lights_pars,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"float calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {","if ( decayExponent > 0.0 ) {","return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );","}","return 1.0;","}","void main() {","vec3 outgoingLight = vec3( 0.0 );","vec4 diffuseColor = vec4( diffuse, opacity );","vec3 specularTex = vec3( 1.0 );","vec2 uvOverlay = uRepeatOverlay * vUv + uOffset;","vec2 uvBase = uRepeatBase * vUv;","vec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;","normalTex.xy *= uNormalScale;","normalTex = normalize( normalTex );","if( enableDiffuse1 && enableDiffuse2 ) {","vec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );","vec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );","colDiffuse1 = GammaToLinear( colDiffuse1, float( GAMMA_FACTOR ) );","colDiffuse2 = GammaToLinear( colDiffuse2, float( GAMMA_FACTOR ) );","diffuseColor *= mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );"," } else if( enableDiffuse1 ) {","diffuseColor *= texture2D( tDiffuse1, uvOverlay );","} else if( enableDiffuse2 ) {","diffuseColor *= texture2D( tDiffuse2, uvOverlay );","}","if( enableSpecular )","specularTex = texture2D( tSpecular, uvOverlay ).xyz;","mat3 tsb = mat3( vTangent, vBinormal, vNormal );","vec3 finalNormal = tsb * normalTex;","vec3 normal = normalize( finalNormal );","vec3 viewPosition = normalize( vViewPosition );","vec3 totalDiffuseLight = vec3( 0.0 );","vec3 totalSpecularLight = vec3( 0.0 );","#if NUM_POINT_LIGHTS > 0","for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {","vec3 lVector = pointLights[ i ].position + vViewPosition.xyz;","float attenuation = calcLightAttenuation( length( lVector ), pointLights[ i ].distance, pointLights[ i ].decay );","lVector = normalize( lVector );","vec3 pointHalfVector = normalize( lVector + viewPosition );","float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );","float pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );","float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );","totalDiffuseLight += attenuation * pointLights[ i ].color * pointDiffuseWeight;","totalSpecularLight += attenuation * pointLights[ i ].color * specular * pointSpecularWeight * pointDiffuseWeight;","}","#endif","#if NUM_DIR_LIGHTS > 0","vec3 dirDiffuse = vec3( 0.0 );","vec3 dirSpecular = vec3( 0.0 );","for( int i = 0; i < NUM_DIR_LIGHTS; i++ ) {","vec3 dirVector = directionalLights[ i ].direction;","vec3 dirHalfVector = normalize( dirVector + viewPosition );","float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );","float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );","float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );","totalDiffuseLight += directionalLights[ i ].color * dirDiffuseWeight;","totalSpecularLight += directionalLights[ i ].color * specular * dirSpecularWeight * dirDiffuseWeight;","}","#endif","#if NUM_HEMI_LIGHTS > 0","vec3 hemiDiffuse  = vec3( 0.0 );","vec3 hemiSpecular = vec3( 0.0 );","for( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {","vec3 lVector = hemisphereLightDirection[ i ];","float dotProduct = dot( normal, lVector );","float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;","totalDiffuseLight += mix( hemisphereLights[ i ].groundColor, hemisphereLights[ i ].skyColor, hemiDiffuseWeight );","float hemiSpecularWeight = 0.0;","vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );","float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;","hemiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );","vec3 lVectorGround = -lVector;","vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );","float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;","hemiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );","totalSpecularLight += specular * mix( hemisphereLights[ i ].groundColor, hemisphereLights[ i ].skyColor, hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;","}","#endif","outgoingLight += diffuseColor.xyz * ( totalDiffuseLight + ambientLightColor + totalSpecularLight );","gl_FragColor = vec4( outgoingLight, diffuseColor.a );",THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;","uniform vec2 uRepeatBase;","uniform sampler2D tNormal;","#ifdef VERTEX_TEXTURES","uniform sampler2D tDisplacement;","uniform float uDisplacementScale;","uniform float uDisplacementBias;","#endif","varying vec3 vTangent;","varying vec3 vBinormal;","varying vec3 vNormal;","varying vec2 vUv;","varying vec3 vViewPosition;",THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.fog_pars_vertex,"void main() {","vNormal = normalize( normalMatrix * normal );","vTangent = normalize( normalMatrix * tangent.xyz );","vBinormal = cross( vNormal, vTangent ) * tangent.w;","vBinormal = normalize( vBinormal );","vUv = uv;","vec2 uvBase = uv * uRepeatBase;","#ifdef VERTEX_TEXTURES","vec3 dv = texture2D( tDisplacement, uvBase ).xyz;","float df = uDisplacementScale * dv.x + uDisplacementBias;","vec3 displacedPosition = normal * df + position;","vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );","vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );","#else","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","#endif","gl_Position = projectionMatrix * mvPosition;","vViewPosition = -mvPosition.xyz;","vec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;","vNormal = normalMatrix * normalTex;",THREE.ShaderChunk.shadowmap_vertex,THREE.ShaderChunk.fog_vertex,"}"].join("\n")}}},function(t,e){THREE.ShaderNoise={noise_generate:{uniforms:{fTime:{value:null},vUv:{value:new THREE.Vector2(0,0)}},vertexShader:["varying vec2 vUv;","uniform vec2 scale;","uniform vec2 offset;","void main( void ) {","    vUv = uv * scale + offset;","    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["\t\t\t// Description : Array and textureless GLSL 3D simplex noise function.","\t\t\t//      Author : Ian McEwan, Ashima Arts.","\t\t\t//  Maintainer : ijm","\t\t\t//     Lastmod : 20110409 (stegu)","\t\t\t//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.","\t\t\t//               Distributed under the MIT License. See LICENSE file.","\t\t\t//","\t\t\tuniform float time;","\t\t\tvarying vec2 vUv;","\t\t\tvec4 permute( vec4 x ) {","\t\t\t\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );","\t\t\t}","\t\t\tvec4 taylorInvSqrt( vec4 r ) {","\t\t\t\treturn 1.79284291400159 - 0.85373472095314 * r;","\t\t\t}","\t\t\tfloat snoise( vec3 v ) {","\t\t\t\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );","\t\t\t\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );","\t\t\t\t// First corner","\t\t\t\tvec3 i  = floor( v + dot( v, C.yyy ) );","\t\t\t\tvec3 x0 = v - i + dot( i, C.xxx );","\t\t\t\t// Other corners","\t\t\t\tvec3 g = step( x0.yzx, x0.xyz );","\t\t\t\tvec3 l = 1.0 - g;","\t\t\t\tvec3 i1 = min( g.xyz, l.zxy );","\t\t\t\tvec3 i2 = max( g.xyz, l.zxy );","\t\t\t\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;","\t\t\t\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;","\t\t\t\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;","\t\t\t\t// Permutations","\t\t\t\ti = mod( i, 289.0 );","\t\t\t\tvec4 p = permute( permute( permute(","\t\t\t\t\t\t i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )","\t\t\t\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )","\t\t\t\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );","\t\t\t\t// Gradients","\t\t\t\t// ( N*N points uniformly over a square, mapped onto an octahedron.)","\t\t\t\tfloat n_ = 1.0 / 7.0; // N=7","\t\t\t\tvec3 ns = n_ * D.wyz - D.xzx;","\t\t\t\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)","\t\t\t\tvec4 x_ = floor( j * ns.z );","\t\t\t\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)","\t\t\t\tvec4 x = x_ *ns.x + ns.yyyy;","\t\t\t\tvec4 y = y_ *ns.x + ns.yyyy;","\t\t\t\tvec4 h = 1.0 - abs( x ) - abs( y );","\t\t\t\tvec4 b0 = vec4( x.xy, y.xy );","\t\t\t\tvec4 b1 = vec4( x.zw, y.zw );","\t\t\t\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;","\t\t\t\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;","\t\t\t\tvec4 sh = -step( h, vec4( 0.0 ) );","\t\t\t\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;","\t\t\t\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;","\t\t\t\tvec3 p0 = vec3( a0.xy, h.x );","\t\t\t\tvec3 p1 = vec3( a0.zw, h.y );","\t\t\t\tvec3 p2 = vec3( a1.xy, h.z );","\t\t\t\tvec3 p3 = vec3( a1.zw, h.w );","\t\t\t\t// Normalise gradients","\t\t\t\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );","\t\t\t\tp0 *= norm.x;","\t\t\t\tp1 *= norm.y;","\t\t\t\tp2 *= norm.z;","\t\t\t\tp3 *= norm.w;","\t\t\t\t// Mix final noise value","\t\t\t\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );","\t\t\t\tm = m * m;","\t\t\t\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),","\t\t\t\t\t\t\t\t\t\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );","\t\t\t}","\t\t\tfloat surface3( vec3 coord ) {","\t\t\t\tfloat n = 0.0;","\t\t\t\tn += 1.0 * abs( snoise( coord ) );","\t\t\t\tn += 0.5 * abs( snoise( coord * 2.0 ) );","\t\t\t\tn += 0.25 * abs( snoise( coord * 4.0 ) );","\t\t\t\tn += 0.125 * abs( snoise( coord * 8.0 ) );","\t\t\t\treturn n;","\t\t\t}","\t\t\tvoid main( void ) {","\t\t\t\tvec3 coord = vec3( vUv, -time );","\t\t\t\tfloat n = surface3( coord );","\t\t\t\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );","\t\t\t}"].join("\n")}}}]);